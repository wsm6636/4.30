#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/string.h>
#include <linux/mm.h>
#include <linux/syscalls.h>
#include <asm/unistd.h>
#include <asm/uaccess.h>
#include <linux/buffer_head.h>
#define MY_FILE "/sys/kernel/debug/memguard/limit"


/*
static void put_membudget(int cpu,int membudget){
	struct file *file = NULL;
	mm_segment_t old_fs;
	//buf[256]="";
        if(file == NULL)
                file = filp_open(MY_FILE, O_RDWR | O_APPEND | O_CREAT, 0644);
       /* if (IS_ERR(file)) {
                return 0;
        }
        sprintf(buf,"%d%s%d", cpu," ",membudget);
	//TRACE("put_membudget,cpu==%d,membudget==%d\n", cpu,membudget);
        old_fs = get_fs();
        set_fs(KERNEL_DS);
        file->f_op->write(file, (char *)buf, sizeof(buf), &file->f_pos);
        set_fs(old_fs);
        filp_close(file, NULL);  
        file = NULL;
        //return 0;

}*/
struct file *file_open(const char *path, int flags, int rights) 
{
    struct file *filp = NULL;
    mm_segment_t oldfs;
    int err = 0;

    oldfs = get_fs();
    set_fs(get_ds());
    filp = filp_open(path, flags, rights);
    set_fs(oldfs);
    if (IS_ERR(filp)) {
        err = PTR_ERR(filp);
        return NULL;
    }
    return filp;
}
void file_close(struct file *file) 
{
    filp_close(file, NULL);
}
int file_write(struct file *file, unsigned long long offset, unsigned char *data, unsigned int size) 
{
    mm_segment_t oldfs;
    int ret;

    oldfs = get_fs();
    set_fs(get_ds());

    ret = vfs_write(file, data, size, &offset);

    set_fs(oldfs);
    return ret;
}
static int __init init(void)
{
	struct file *file = NULL;
	file=file_open(MY_FILE, O_RDWR | O_APPEND | O_CREAT, 0644);	
	file_write(file, 0,"1 100",sizeof("1 100"));
	file_close(file);
        return 0;
}

static void __exit fini(void)
{
        /*if(file != NULL)
                filp_close(file, NULL);
	buf[128]="";*/
}

module_init(init);
module_exit(fini);
MODULE_LICENSE("GPL");


